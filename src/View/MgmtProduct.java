/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.SQLite;
import Model.Product;
import Model.Session;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.awt.CardLayout;
import java.sql.Timestamp;
import java.util.Date;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author beepxD
 */
public class MgmtProduct extends javax.swing.JPanel {

    public SQLite sqlite;
    public DefaultTableModel tableModel;


      
    
    public MgmtProduct(SQLite sqlite) {
        
        initComponents();
        this.sqlite = sqlite;
        tableModel = (DefaultTableModel)table.getModel();
        table.getTableHeader().setFont(new java.awt.Font("SansSerif", java.awt.Font.BOLD, 14));

//        UNCOMMENT TO DISABLE BUTTONS
//        purchaseBtn.setVisible(false);
//        addBtn.setVisible(false);
//        editBtn.setVisible(false);
//        deleteBtn.setVisible(false);
    }

    public void init(){
        //      CLEAR TABLE
        for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
            tableModel.removeRow(0);
        }
        
//      LOAD CONTENTS
        ArrayList<Product> products = sqlite.getProduct();
        for(int nCtr = 0; nCtr < products.size(); nCtr++){
            tableModel.addRow(new Object[]{
                products.get(nCtr).getName(), 
                products.get(nCtr).getStock(), 
                products.get(nCtr).getPrice()});
        }
        
        
        //Get current session: username and role
        Session session = sqlite.getSession();
        
        switch (session.getRole()) {
            //if Client; purchase only
            case 2: addBtn.setVisible(false);
                    editBtn.setVisible(false);
                    deleteBtn.setVisible(false);
                    break;
            //if Staff OR Manager; add, edit, delete
            case 3:
            case 4: purchaseBtn.setVisible(false);
                    break;
        }
        
    }
    
    public void designer(JTextField component, String text){
        component.setSize(70, 600);
        component.setFont(new java.awt.Font("Tahoma", 0, 18));
        component.setBackground(new java.awt.Color(240, 240, 240));
        component.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        component.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), text, javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 12)));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        purchaseBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();

        table.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Name", "Stock", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setRowHeight(24);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(50);
            table.getColumnModel().getColumn(1).setMaxWidth(100);
            table.getColumnModel().getColumn(2).setMaxWidth(100);
        }

        purchaseBtn.setBackground(new java.awt.Color(255, 255, 255));
        purchaseBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        purchaseBtn.setText("PURCHASE");
        purchaseBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purchaseBtnActionPerformed(evt);
            }
        });

        addBtn.setBackground(new java.awt.Color(255, 255, 255));
        addBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        addBtn.setText("ADD");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        editBtn.setBackground(new java.awt.Color(255, 255, 255));
        editBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        editBtn.setText("EDIT");
        editBtn.setToolTipText("");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setBackground(new java.awt.Color(255, 255, 255));
        deleteBtn.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        deleteBtn.setText("DELETE");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(purchaseBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(addBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(editBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(0, 0, 0)
                        .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addGap(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 222, Short.MAX_VALUE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(purchaseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void purchaseBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purchaseBtnActionPerformed
        System.out.println("Purchase Button pressed");
        
        if(table.getSelectedRow() >= 0){
           
            JTextField stockFld = new JTextField("0");
            designer(stockFld, "PRODUCT STOCK");

            Object[] message = {
                "How many " + tableModel.getValueAt(table.getSelectedRow(), 0) + " do you want to purchase?", stockFld
            };

            int result = JOptionPane.showConfirmDialog(null, message, "PURCHASE PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

            if (result == JOptionPane.OK_OPTION) {
                
                //Get current session: username and role
                Session session = sqlite.getSession();
                
                //parse quantity to integer
                try {
                    int quantity = Integer.parseInt(stockFld.getText());
                    int currentstock = Integer.parseInt(tableModel.getValueAt(table.getSelectedRow(), 1).toString());
                    
                    //check if requested number is larger than the stock
                    //if not, add to History
                    
                    System.out.println ("Qty: " + quantity + " | Current Stock: " + currentstock);
                    
                    if (quantity <= currentstock && quantity > 0) {
                        System.out.println(quantity + " > " + currentstock);
                        
                        //Add purchase to History database
                        String currenttimestamp = new Timestamp(new Date().getTime()).toString();
                        sqlite.addHistory(session.getUsername(), tableModel.getValueAt(table.getSelectedRow(), 0).toString(), quantity, currenttimestamp);
                        
                        //Reduce stock number / update Product database
                        currentstock = currentstock - quantity;
                        sqlite.changeProduct(tableModel.getValueAt(table.getSelectedRow(), 0).toString(), currentstock);
                        System.out.println("Reduced stock to " + currentstock);
                        JOptionPane.showMessageDialog(null, "Purchase successful!");
                        
                    } else {
                        JOptionPane.showMessageDialog(null, "ERROR: Invalid quantity given!");
                    }
                    
                //if yes, cancel Purchase                    
                } catch (NumberFormatException e) {
                    System.out.println("Error: The string cannot be converted to an integer. Purchase CANCELLED");
                }
                
                //Refresh Product page
                init();
            }
        }
    }//GEN-LAST:event_purchaseBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        JTextField nameFld = new JTextField();
        JTextField stockFld = new JTextField();
        JTextField priceFld = new JTextField();

        designer(nameFld, "PRODUCT NAME");
        designer(stockFld, "PRODUCT STOCK");
        designer(priceFld, "PRODUCT PRICE");

        Object[] message = {
            "Insert New Product Details:", nameFld, stockFld, priceFld
        };

        int result = JOptionPane.showConfirmDialog(null, message, "ADD PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);

        if (result == JOptionPane.OK_OPTION) {

            if (!stockFld.getText().matches("\\d+")) {
            JOptionPane.showMessageDialog(null, "Please enter a valid integer value for stock.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
            return; // Exit the method, so the product won't be added
            }
        
            // Input validation for price (accepts float values)
            Pattern pricePattern = Pattern.compile("^\\d+(\\.\\d{1,2})?$");
            Matcher priceMatcher = pricePattern.matcher(priceFld.getText());
            if (!priceMatcher.matches()) {
                JOptionPane.showMessageDialog(null, "Please enter a valid floating-point value for price.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                return; // Exit the method, so the product won't be added
            }

                String sql = "INSERT INTO product (name, stock, price) VALUES (?, ?, ?)";

            try (Connection conn = DriverManager.getConnection("jdbc:sqlite:database.db");
                 PreparedStatement pstmt = conn.prepareStatement(sql)) {

                pstmt.setString(1, nameFld.getText());
                pstmt.setInt(2, Integer.parseInt(stockFld.getText()));
                pstmt.setDouble(3, Float.parseFloat(priceFld.getText()));

                pstmt.executeUpdate();
                System.out.println("New product added successfully.");

            } catch (SQLException e) {
                System.err.println("Error adding product: " + e.getMessage());
            }
        
            for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
                tableModel.removeRow(0);
            }

            ArrayList<Product> products = sqlite.getProduct();
            for(int nCtr = 0; nCtr < products.size(); nCtr++){
                tableModel.addRow(new Object[]{
                    products.get(nCtr).getName(), 
                    products.get(nCtr).getStock(), 
                    products.get(nCtr).getPrice()});
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            JTextField nameFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 0) + "");
            JTextField stockFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 1) + "");
            JTextField priceFld = new JTextField(tableModel.getValueAt(table.getSelectedRow(), 2) + "");

            designer(nameFld, "PRODUCT NAME");
            designer(stockFld, "PRODUCT STOCK");
            designer(priceFld, "PRODUCT PRICE");

            Object[] message = {
                "Edit Product Details:", nameFld, stockFld, priceFld
            };

            ResultSet resultSet = null;
            String sql0 = "SELECT id FROM product WHERE name = ?";
            int productid=99;
            try (Connection conn = DriverManager.getConnection("jdbc:sqlite:database.db"))
             {
                PreparedStatement pstmt0 = conn.prepareStatement(sql0);
                pstmt0 = conn.prepareStatement(sql0);
                pstmt0.setString(1, nameFld.getText()); // Set the product name as the parameter value
                resultSet = pstmt0.executeQuery();
                if (resultSet.next()) {
                productid = resultSet.getInt("id");
                System.out.println(productid);
            }
            else{
                System.out.println("Error with product id");
            }

                }
            catch (SQLException e) {
                System.err.println("Error editing product: " + e.getMessage());
            }

            int result = JOptionPane.showConfirmDialog(null, message, "EDIT PRODUCT", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE, null);
            if (result == JOptionPane.OK_OPTION) {
                System.out.println(nameFld.getText());
                System.out.println(stockFld.getText());
                System.out.println(priceFld.getText());

                if (!stockFld.getText().matches("\\d+")) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid integer value for stock.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the method, so the product won't be added
                }
            
                // Input validation for price (accepts float values)
                Pattern pricePattern = Pattern.compile("^\\d+(\\.\\d{1,2})?$");
                Matcher priceMatcher = pricePattern.matcher(priceFld.getText());
                if (!priceMatcher.matches()) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid floating-point value for price.", "Invalid Input", JOptionPane.ERROR_MESSAGE);
                    return; // Exit the method, so the product won't be added
                }


                try(Connection conn = DriverManager.getConnection("jdbc:sqlite:database.db")) {

                    String updateQuery = "UPDATE product SET name = ?, stock = ?, price = ? WHERE id = ?";
                    PreparedStatement preparedStatement = null;
                    // Step 4: Execute the SQL script
                    preparedStatement = conn.prepareStatement(updateQuery);
                    preparedStatement.setString(1, nameFld.getText());
                    preparedStatement.setString(2, stockFld.getText());
                    preparedStatement.setString(3, priceFld.getText());
                    // Set the appropriate ID value to identify the row you want to update
                    preparedStatement.setInt(4, productid);

                    int rowsAffected = preparedStatement.executeUpdate();
                    System.out.println(rowsAffected + " row(s) updated successfully.");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } 
      
            for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
                tableModel.removeRow(0);
            }
            ArrayList<Product> products = sqlite.getProduct();
            for(int nCtr = 0; nCtr < products.size(); nCtr++){
                tableModel.addRow(new Object[]{
                    products.get(nCtr).getName(), 
                    products.get(nCtr).getStock(), 
                    products.get(nCtr).getPrice()});
            }
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        if(table.getSelectedRow() >= 0){
            int productid=99;
            int result = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete " + tableModel.getValueAt(table.getSelectedRow(), 0) + "?", "DELETE PRODUCT", JOptionPane.YES_NO_OPTION);
            
            if (result == JOptionPane.YES_OPTION) {
                System.out.println(tableModel.getValueAt(table.getSelectedRow(), 0));

                ResultSet resultSet = null;
                String sql0 = "SELECT id FROM product WHERE name = ?";

                try (Connection conn = DriverManager.getConnection("jdbc:sqlite:database.db")) {
                    PreparedStatement pstmt0 = conn.prepareStatement(sql0);
                    pstmt0 = conn.prepareStatement(sql0);
                    pstmt0.setString(1, tableModel.getValueAt(table.getSelectedRow(),0).toString()); // Set the product name as the parameter value
                    resultSet = pstmt0.executeQuery();
                    if (resultSet.next()) {
                        productid = resultSet.getInt("id");
                        System.out.println(productid);
                    }
                } catch (SQLException e) {
                    System.err.println("Error adding product: " + e.getMessage());
                }

                try(Connection conn = DriverManager.getConnection("jdbc:sqlite:database.db")) {    
                    String deleteQuery = "DELETE FROM product WHERE id = ?";

                    PreparedStatement preparedStatement = null;
                    preparedStatement = conn.prepareStatement(deleteQuery);
                    preparedStatement.setInt(1, productid); // Set the product ID as the parameter value

                    int rowsAffected = preparedStatement.executeUpdate();
                    if (rowsAffected > 0) {
                        System.out.println("Product with ID " + productid + " deleted successfully.");
                    } else {
                        System.out.println("Product with ID " + productid + " not found.");
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }

                for(int nCtr = tableModel.getRowCount(); nCtr > 0; nCtr--){
                    tableModel.removeRow(0);
                }

                ArrayList<Product> products = sqlite.getProduct();
                for(int nCtr = 0; nCtr < products.size(); nCtr++){
                    tableModel.addRow(new Object[]{
                        products.get(nCtr).getName(), 
                        products.get(nCtr).getStock(), 
                        products.get(nCtr).getPrice()});
                }
            }
        }



    }//GEN-LAST:event_deleteBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton purchaseBtn;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
